Minimum steps to destination
Input: d = 2
Output: 3
Explaination: The steps takn are +1, -2 and +3.

Input: d = 10
Output: 4
Explaination: The steps are +1, +2, +3 and +4.

class Solution {
public:
    int minSteps(int d) {
        d=abs(d);
       int sum=0;
       int move=0;
       while(abs(sum-d)%2!=0 || sum<d){
           move++;
           sum+=move;
       }
       return move;
    }
};

2373. Largest Local Values in a Matrix
Input: grid = [[9,9,8,1],[5,6,2,6],[8,2,6,4],[6,2,2,2]]
Output: [[9,9],[8,6]]
Explanation: The diagram above shows the original matrix and the generated matrix.
Notice that each value in the generated matrix corresponds to the largest value of a contiguous 3 x 3 matrix in grid.

class Solution {
public:
    vector<vector<int>> largestLocal(vector<vector<int>>& grid) {
      int n=grid.size();
       vector<vector<int>> ans(n-2,vector<int>(n-2));
for(int i=0;i<n-2;i++){
    for(int j=0;j<n-2;j++){
        for(int x=i;x<=i+2;x++){
            for(int y=j;y<=j+2;y++){
                ans[i][j]=max(ans[i][j],grid[x][y]);
            }
        }
    }
}
    return ans;
}
};
