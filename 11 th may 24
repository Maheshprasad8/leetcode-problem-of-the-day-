Juggler Sequence
Input: n = 9
Output: 9 27 140 11 36 6 2 1
Explaination: We start with 9 and use 
above formula to get next terms.
class Solution {
  public:
    vector<long long> jugglerSequence(long long n) {
         vector<long long >ans;
          ans.push_back(n);
      while(n!=1){
        
          if(n%2==0){
             n=floor(sqrt(n));
          }
          else{
             n=floor(sqrt(n)*sqrt(n)*sqrt(n));
              }
       ans.push_back(n);
      }
      return ans;
    }
};

857. Minimum Cost to Hire K Workers
Input: quality = [10,20,5], wage = [70,50,30], k = 2
Output: 105.00000
Explanation: We pay 70 to 0th worker and 35 to 2nd worker.
Example 2:

Input: quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3
Output: 30.66667
Explanation: We pay 4 to 0th worker, 13.33333 to 2nd and 3rd workers separately.
class Solution {
public:
    double mincostToHireWorkers(vector<int>& quality, vector<int>& wage, int k) {
         vector<pair<double, int>> workers;
        for (int i = 0; i < quality.size(); i++) {
            workers.push_back({(wage[i]*1.0) / quality[i], quality[i]});
        }
        
        sort(workers.begin(), workers.end());
        
        double ans = DBL_MAX;
        double quantitySum = 0;
        priority_queue<int> pq;
        
        for (auto worker : workers) {
            double ratio = worker.first;
            quantitySum += worker.second;
            pq.push(worker.second);
            if (pq.size() > k) {
                quantitySum -= pq.top();
                pq.pop();
            }
            if (pq.size() == k) {
               
                               double totalWage = quantitySum * ratio;
                ans = min(ans, totalWage);
            }
        }
        
        return ans;
    }
};
