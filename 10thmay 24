10th may 24
786. K-th Smallest Prime Fraction
Input: arr = [1,2,3,5], k = 3
Output: [2,5]
Explanation: The fractions to be considered in sorted order are:
1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.
The third fraction is 2/5.
class Solution {
public:
    vector<int> kthSmallestPrimeFraction(vector<int>& arr, int k) {
        int n = arr.size();
      
      priority_queue<pair<double, pair<int, int>>, 
        vector<pair<double, pair<int, int>>>, greater<>> pq;
       for (int j = 1; j < n; ++j) {
            pq.push({(double)arr[0] / arr[j], {0, j}});
        }
        for (int count = 0; count < k - 1; ++count) {
            auto top = pq.top();
            pq.pop();
            int i = top.second.first;
            int j = top.second.second;
            if (i + 1 < j) {
                pq.push({(double)arr[i + 1] / arr[j], {i + 1, j}});
            }
        }
      auto result = pq.top();
        return {arr[result.second.first], arr[result.second.second]};
    }
};
Q..Combination Sum II

//{ Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function Template for C++

class Solution{
    private:
    void backtrack(vector<int> &arr,vector<vector<int>>&ans,vector<int>&current,int s,int target){
        if(target==0){
            ans.push_back(current);
            return;
        }
    
    for(int i=s;i<arr.size();i++){
        if((i>s && arr[i]==arr[i-1])){
            continue;
        }
        if(arr[i]>target){
            break;
        }
            current.push_back(arr[i]);
            backtrack(arr,ans,current,i+1,target-arr[i]);
            current.pop_back();
    }  
    }
public:
    vector<vector<int>> CombinationSum2(vector<int> arr,int n,int k)
    {
        sort(arr.begin(), arr.end());
       vector<int>current;
       vector<vector<int>>ans;
       backtrack(arr,ans,current,0,k);
       return ans;
    }
};

//{ Driver Code Starts.


int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n,k;
        cin>>n>>k;
        vector<int> arr(n);
        for(int i=0;i<n;i++)
        {
            cin>>arr[i];
        }
        Solution ob;
        auto obj=ob.CombinationSum2(arr,n,k);
        for(int i=0;i<obj.size();i++)
        {
            for(int j=0;j<obj[i].size();j++)
            {
                cout<<obj[i][j]<<" ";
            }
            cout<<"\n";
        }
        if(obj.size()==0) cout<<"\n";
    }
    return 0;
}
// } Driver Code Ends
