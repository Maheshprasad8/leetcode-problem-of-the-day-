861. Score After Flipping Matrix
Input: grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]]
Output: 39
Explanation: 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39
Example 2:

Input: grid = [[0]]
Output: 1
class Solution {
public:
    int matrixScore(vector<vector<int>>& grid) {
        int row=grid.size();
        int col=grid[0].size();
        for(int i=0;i<row;i++){
            if(grid[i][0]==0){
               for(int j=0;j<col;j++){
    grid[i][j]^=1;
 }
            }

        }

 int ans = 0;
        for (int j = 0; j < col; ++j) {
            int cnt = 0;
            for (int i = 0; i < row; ++i) {
                cnt += grid[i][j];
            }
            ans += max(cnt, row - cnt) * (1 << (col - j - 1));
        }
        return ans;
 }
        
};
Number of Good Components

e=3 
v=3
edges={{1, 2},{1, 3},{3, 2}}
Output: 
1
Explanation: 
We can see that there is only one component in the graph and in this component there is a edge between any two vertces.
//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

class Matrix {
  public:
    template <class T>
    static void input(vector<vector<T>> &A, int n, int m) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                scanf("%d ", &A[i][j]);
            }
        }
    }

    template <class T>
    static void print(vector<vector<T>> &A) {
        for (int i = 0; i < A.size(); i++) {
            for (int j = 0; j < A[i].size(); j++) {
                cout << A[i][j] << " ";
            }
            cout << endl;
        }
    }
};


// } Driver Code Ends



class Solution {
  public:
    bool bfs(vector<int>adj[], int start, vector<int>&vis){
        int num=0, edges=0;
        queue<int>q;
        q.push(start);
        vis[start]=1;
        
        while(!q.empty()){
            int node=q.front();
            q.pop();
            
            num++;
            edges+=adj[node].size();
            
            for(auto it:adj[node]){
                if(!vis[it]){
                    q.push(it);
                    vis[it]=1;
                }
            }
        }
        
        return (num*(num-1) == edges);
    }
  
    int findNumberOfGoodComponent(int e, int v, vector<vector<int>> &edges) {
        // code here
        vector<int>adj[v+1];
        for(int i=0;i<e;i++){
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
        
        vector<int>vis(v+1,0);
        int ans=0;
        for(int i=1;i<=v;i++){
            if(bfs(adj, i, vis)){
                ans++;
            }
        }
        return ans;
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    scanf("%d ", &t);
    while (t--) {

        int e;
        scanf("%d", &e);

        int v;
        scanf("%d", &v);

        vector<vector<int>> edges(e, vector<int>(2));
        Matrix::input(edges, e, 2);

        Solution obj;
        int res = obj.findNumberOfGoodComponent(e, v, edges);

        cout << res << endl;
    }
}

// } Driver Code Ends
